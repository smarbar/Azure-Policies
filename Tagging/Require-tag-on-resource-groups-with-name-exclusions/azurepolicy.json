{
  "type": "Microsoft.Authorization/policyDefinitions",
  "name": "require-tag-on-resource-group-with-name-exclusions",
  "properties": {
    "displayName": "Require a tag on resource groups where name does not match pattern",
    "policyType": "Custom",
    "mode": "All",
    "description": "Enforces existence of a tag on resource groups where the resource group name does not match values in a parameter array. It does not enforce a tag value.",
    "metadata": {
      "version": "1.0.0",
      "category": "Tags"
    },
    "parameters": {
      "tagName": {
        "type": "String",
        "metadata": {
          "displayName": "Tag Name",
          "description": "Name of the tag, such as 'environment'"
        },
        "effect": {
          "type": "String",
          "metadata": {
            "displayName": "Effect",
            "description": "Enable or disable the execution of the policy"
          },
          "allowedValues": ["Audit", "Deny", "Disabled"],
          "defaultValue": "Deny"
        }
      },
      "resourceGroupExclusions": {
        "type": "Array",
        "defaultValue": [
          "AzureBackupRG*",
          "ResourceMover*",
          "databricks-rg*",
          "NetworkWatcherRG",
          "microsoft-network",
          "LogAnalyticsDefaultResources",
          "DynamicsDeployments*",
          "MC_myResourceGroup*"
        ],
        "metadata": {
          "displayName": "Resource Group Name Exclusions",
          "description": "Resource Group Name that will be excluded from policy"
        }
      }
    },
    "policyRule": {
      "if": {
        "allOf": [
          {
            "field": "type",
            "equals": "Microsoft.Resources/subscriptions/resourceGroups"
          },
          {
            "field": "[concat('tags[', parameters('tagName'), ']')]",
            "exists": "false"
          },
          {
            "count": {
              "value": "[parameters('resourceGroupExclusions')]",
              "name": "pattern",
              "where": {
                "field": "name",
                "like": "[current('pattern')]"
              }
            },
            "equals": 0
          }
        ]
      },
      "then": {
        "effect": "[parameters('effect')]"
      }
    }
  }
}
